import { Injectable, NgZone, Optional, Inject, ɵɵdefineInjectable, ɵɵinject } from '@angular/core';
import { MatDialog } from '@angular/material/dialog';
import { Subject } from 'rxjs';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var diractionMap = { left: 'left', right: 'left', top: 'top', bottom: 'top' };
/** @type {?} */
var multyMap = { left: 1, right: -1, top: 1, bottom: -1 };
/**
 * @record
 */
function AnimationOption() { }
if (false) {
    /** @type {?|undefined} */
    AnimationOption.prototype.keyframes;
    /** @type {?} */
    AnimationOption.prototype.keyframeAnimationOptions;
}
/**
 * @record
 */
function MatDialogConfig() { }
if (false) {
    /** @type {?|undefined} */
    MatDialogConfig.prototype.title;
    /** @type {?|undefined} */
    MatDialogConfig.prototype.animation;
    /** @type {?|undefined} */
    MatDialogConfig.prototype.position;
}
var NgDialogAnimationService = /** @class */ (function () {
    function NgDialogAnimationService(dialog, ngZone, incomingOptions, outgoingOptions) {
        this.dialog = dialog;
        this.ngZone = ngZone;
        this.incomingOptions = incomingOptions;
        this.outgoingOptions = outgoingOptions;
    }
    /**
     * @template T, D, R
     * @param {?} componentOrTemplateRef
     * @param {?=} config
     * @return {?}
     */
    NgDialogAnimationService.prototype.open = /**
     * @template T, D, R
     * @param {?} componentOrTemplateRef
     * @param {?=} config
     * @return {?}
     */
    function (componentOrTemplateRef, config) {
        var _this = this;
        /** @type {?} */
        var dir = config.direction || (document.querySelectorAll('[dir="rtl"]').length ? 'rtl' : 'ltr');
        config.direction = config.direction || dir;
        if (config.animation) {
            if (config.animation.to === 'aside') {
                config.animation.to = dir === 'rtl' ? 'left' : 'right';
            }
        }
        if (config.position && config.position.rowEnd) {
            if (dir === 'rtl') {
                config.position.right = config.position.rowEnd;
            }
            else {
                config.position.left = config.position.rowEnd;
            }
        }
        if (config.position && config.position.rowStart) {
            if (dir === 'rtl') {
                config.position.left = config.position.rowStart;
            }
            else {
                config.position.right = config.position.rowStart;
            }
        }
        /** @type {?} */
        var ref = this.dialog.open(componentOrTemplateRef, config);
        /** @type {?} */
        var container = (/** @type {?} */ (document.getElementsByTagName('mat-dialog-container')[0]));
        if (config.title) {
            /** @type {?} */
            var el = document.createElement('span');
            el.textContent = config.title;
            el.className = 'dialogTitle';
            /** @type {?} */
            var elClose = document.createElement('span');
            elClose.textContent = 'X';
            elClose.className = 'dialogClose';
            elClose.addEventListener('click', (/**
             * @return {?}
             */
            function () {
                ref.close();
            }));
            /** @type {?} */
            var titleContainer = document.createElement('div');
            titleContainer.className = 'titleContainer';
            titleContainer.append(el);
            titleContainer.append(elClose);
            container.prepend(titleContainer);
        }
        if (config.animation) {
            /** @type {?} */
            var incomingOptions = config.animation.incomingOptions ||
                this.incomingOptions || { keyframeAnimationOptions: { duration: 600, easing: 'ease-in' } };
            /** @type {?} */
            var outgoingOptions_1 = config.animation.outgoingOptions ||
                this.outgoingOptions || { keyframeAnimationOptions: { duration: 600, easing: 'ease-out' } };
            /** @type {?} */
            var wrapper_1 = document.getElementsByClassName('cdk-global-overlay-wrapper')[0];
            /** @type {?} */
            var animate_1 = (/**
             * @param {?} keyframes
             * @param {?} options
             * @return {?}
             */
            function (keyframes, options) {
                return wrapper_1.animate(keyframes, options);
            });
            /** @type {?} */
            var _afterClosed_1 = new Subject();
            ref.afterClosed = (/**
             * @return {?}
             */
            function () {
                return _afterClosed_1.asObservable();
            });
            /** @type {?} */
            var closeFunction_1 = ref.close;
            /** @type {?} */
            var incomeKeyFrames = incomingOptions.keyframes;
            /** @type {?} */
            var outgoingKeyFrames_1 = outgoingOptions_1.keyframes;
            if (config.animation.to) {
                /** @type {?} */
                var to = diractionMap[config.animation.to];
                /** @type {?} */
                var keyFrame100 = {};
                /** @type {?} */
                var keyFrame0 = {};
                keyFrame0[to] = 0;
                keyFrame100[to] =
                    to === 'top' || to === 'bottom'
                        ? container.clientHeight * multyMap[config.animation.to] + 'px'
                        : container.clientWidth * multyMap[config.animation.to] + 'px';
                incomeKeyFrames = incomeKeyFrames || [keyFrame100, keyFrame0];
                outgoingKeyFrames_1 = outgoingKeyFrames_1 || [keyFrame0, keyFrame100];
            }
            animate_1(incomeKeyFrames, incomingOptions.keyframeAnimationOptions);
            /** @type {?} */
            var closeHandler_1 = (/**
             * @param {?=} dialogResult
             * @return {?}
             */
            function (dialogResult) {
                _afterClosed_1.next(dialogResult);
                /** @type {?} */
                var animation = animate_1(outgoingKeyFrames_1, outgoingOptions_1.keyframeAnimationOptions);
                animation.onfinish = (/**
                 * @return {?}
                 */
                function () {
                    ((/** @type {?} */ (wrapper_1))).style.display = 'none';
                    _this.ngZone.run((/**
                     * @return {?}
                     */
                    function () { return ref.close(dialogResult); }));
                });
                ref.close = closeFunction_1;
            });
            ref.close = (/**
             * @param {?=} dialogResult
             * @return {?}
             */
            function (dialogResult) { return closeHandler_1(dialogResult); });
        }
        return ref;
    };
    NgDialogAnimationService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    /** @nocollapse */
    NgDialogAnimationService.ctorParameters = function () { return [
        { type: MatDialog },
        { type: NgZone },
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: ['INCOMING_OPTION',] }] },
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: ['OUTGOING_OPTION',] }] }
    ]; };
    /** @nocollapse */ NgDialogAnimationService.ɵprov = ɵɵdefineInjectable({ factory: function NgDialogAnimationService_Factory() { return new NgDialogAnimationService(ɵɵinject(MatDialog), ɵɵinject(NgZone), ɵɵinject("INCOMING_OPTION", 8), ɵɵinject("OUTGOING_OPTION", 8)); }, token: NgDialogAnimationService, providedIn: "root" });
    return NgDialogAnimationService;
}());
if (false) {
    /**
     * @type {?}
     * @private
     */
    NgDialogAnimationService.prototype.dialog;
    /**
     * @type {?}
     * @private
     */
    NgDialogAnimationService.prototype.ngZone;
    /**
     * @type {?}
     * @private
     */
    NgDialogAnimationService.prototype.incomingOptions;
    /**
     * @type {?}
     * @private
     */
    NgDialogAnimationService.prototype.outgoingOptions;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { NgDialogAnimationService };
//# sourceMappingURL=ng-dialog-animation.js.map
