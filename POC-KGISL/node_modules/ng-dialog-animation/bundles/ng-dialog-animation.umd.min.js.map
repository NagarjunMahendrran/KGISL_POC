{"version":3,"sources":["ng://ng-dialog-animation/lib/ng-dialog-animation.service.ts"],"names":["diractionMap","left","right","top","bottom","multyMap","NgDialogAnimationService","dialog","ngZone","incomingOptions","outgoingOptions","this","prototype","open","componentOrTemplateRef","config","_this","dir","direction","document","querySelectorAll","length","animation","to","position","rowEnd","rowStart","ref","container","getElementsByTagName","title","el","createElement","textContent","className","elClose","addEventListener","close","titleContainer","append","prepend","keyframeAnimationOptions","duration","easing","outgoingOptions_1","wrapper_1","getElementsByClassName","animate_1","keyframes","options","animate","_afterClosed_1","Subject","afterClosed","asObservable","closeFunction_1","incomeKeyFrames","outgoingKeyFrames_1","keyFrame100","keyFrame0","clientHeight","clientWidth","dialogResult","next","onfinish","style","display","run","closeHandler_1","Injectable","args","providedIn","MatDialog","NgZone","Optional","type","Inject"],"mappings":"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","sourcesContent":["import { Inject, Injectable, NgZone, Optional, TemplateRef } from '@angular/core';\r\nimport { DialogPosition, MatDialog, MatDialogConfig as _MatDialogConfig, MatDialogRef } from '@angular/material/dialog';\r\nimport { ComponentType } from '@angular/cdk/portal';\r\nimport { Subject } from 'rxjs';\r\n\r\nconst diractionMap = { left: 'left', right: 'left', top: 'top', bottom: 'top' };\r\nconst multyMap = { left: 1, right: -1, top: 1, bottom: -1 };\r\n\r\nexport interface AnimationOption {\r\n    keyframes?: Keyframe[];\r\n    keyframeAnimationOptions: KeyframeAnimationOptions;\r\n}\r\n\r\nexport interface MatDialogConfig extends _MatDialogConfig {\r\n    title?: string;\r\n    animation?:\r\n        | {\r\n              to: 'aside' | 'top' | 'bottom' | 'left' | 'right';\r\n              incomingOptions?: { keyframes?: Keyframe[]; keyframeAnimationOptions: KeyframeAnimationOptions };\r\n              outgoingOptions?: { keyframes?: Keyframe[]; keyframeAnimationOptions: KeyframeAnimationOptions };\r\n          }\r\n        | {\r\n              to?: 'aside' | 'top' | 'bottom' | 'left' | 'right';\r\n              incomingOptions?: { keyframes: Keyframe[]; keyframeAnimationOptions: KeyframeAnimationOptions };\r\n              outgoingOptions?: { keyframes: Keyframe[]; keyframeAnimationOptions: KeyframeAnimationOptions };\r\n          };\r\n    position?: DialogPosition & { rowStart?: string; rowEnd?: string };\r\n}\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class NgDialogAnimationService {\r\n    constructor(\r\n        private dialog: MatDialog,\r\n        private ngZone: NgZone,\r\n        @Optional()\r\n        @Inject('INCOMING_OPTION')\r\n        private incomingOptions?: AnimationOption,\r\n        @Optional()\r\n        @Inject('OUTGOING_OPTION')\r\n        private outgoingOptions?: AnimationOption,\r\n    ) {}\r\n\r\n    open<T, D = any, R = any>(\r\n        componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\r\n        config?: MatDialogConfig,\r\n    ): MatDialogRef<T, R> {\r\n        const dir: 'ltr' | 'rtl' =\r\n            config.direction || (document.querySelectorAll('[dir=\"rtl\"]').length ? 'rtl' : 'ltr');\r\n        config.direction = config.direction || dir;\r\n        if (config.animation) {\r\n            if (config.animation.to === 'aside') {\r\n                config.animation.to = dir === 'rtl' ? 'left' : 'right';\r\n            }\r\n        }\r\n\r\n        if (config.position && config.position.rowEnd) {\r\n          if (dir === 'rtl') {\r\n            config.position.right = config.position.rowEnd;\r\n          } else {\r\n            config.position.left = config.position.rowEnd;\r\n          }\r\n        }\r\n\r\n        if (config.position && config.position.rowStart) {\r\n          if (dir === 'rtl') {\r\n            config.position.left = config.position.rowStart;\r\n          } else {\r\n            config.position.right = config.position.rowStart;\r\n          }\r\n        }\r\n\r\n        const ref = this.dialog.open(componentOrTemplateRef, config);\r\n        const container = document.getElementsByTagName('mat-dialog-container')[0] as HTMLElement;\r\n        if (config.title) {\r\n            const el = document.createElement('span');\r\n            el.textContent = config.title;\r\n            el.className = 'dialogTitle';\r\n\r\n            const elClose = document.createElement('span');\r\n            elClose.textContent = 'X';\r\n            elClose.className = 'dialogClose';\r\n            elClose.addEventListener('click', () => {\r\n                ref.close();\r\n            });\r\n\r\n            const titleContainer = document.createElement('div');\r\n            titleContainer.className = 'titleContainer';\r\n            titleContainer.append(el);\r\n            titleContainer.append(elClose);\r\n            container.prepend(titleContainer);\r\n        }\r\n\r\n        if (config.animation) {\r\n            const incomingOptions: AnimationOption = config.animation.incomingOptions ||\r\n                this.incomingOptions || { keyframeAnimationOptions: { duration: 600, easing: 'ease-in' } };\r\n\r\n            const outgoingOptions: AnimationOption = config.animation.outgoingOptions ||\r\n                this.outgoingOptions || { keyframeAnimationOptions: { duration: 600, easing: 'ease-out' } };\r\n\r\n            const wrapper = document.getElementsByClassName('cdk-global-overlay-wrapper')[0];\r\n\r\n            const animate = (keyframes, options) => {\r\n                return wrapper.animate(keyframes, options);\r\n            };\r\n            const _afterClosed = new Subject();\r\n            ref.afterClosed = () => {\r\n                return _afterClosed.asObservable();\r\n            };\r\n            const closeFunction = ref.close;\r\n\r\n            let incomeKeyFrames = incomingOptions.keyframes;\r\n            let outgoingKeyFrames = outgoingOptions.keyframes;\r\n            if (config.animation.to) {\r\n                const to = diractionMap[config.animation.to];\r\n                const keyFrame100 = {};\r\n                const keyFrame0 = {};\r\n                keyFrame0[to] = 0;\r\n                keyFrame100[to] =\r\n                    to === 'top' || to === 'bottom'\r\n                        ? container.clientHeight * multyMap[config.animation.to] + 'px'\r\n                        : container.clientWidth * multyMap[config.animation.to] + 'px';\r\n                incomeKeyFrames = incomeKeyFrames || [keyFrame100, keyFrame0];\r\n                outgoingKeyFrames = outgoingKeyFrames || [keyFrame0, keyFrame100];\r\n            }\r\n            animate(incomeKeyFrames, incomingOptions.keyframeAnimationOptions);\r\n            const closeHandler = (dialogResult?: R) => {\r\n                _afterClosed.next(dialogResult);\r\n                const animation = animate(outgoingKeyFrames, outgoingOptions.keyframeAnimationOptions);\r\n                animation.onfinish = () => {\r\n                    (wrapper as HTMLElement).style.display = 'none';\r\n                    this.ngZone.run(() => ref.close(dialogResult));\r\n                };\r\n                ref.close = closeFunction;\r\n            };\r\n            ref.close = (dialogResult?: R) => closeHandler(dialogResult);\r\n        }\r\n\r\n        return ref;\r\n    }\r\n}\r\n"]}